// Iterative factorial
fn fact(x int) int {
    var y int;
    y = 1;
    while x != 0 {
        y = y * x;
        x = x - 1;
    }
    return y;
}

// Recursive fibonacci
fn fib(x int) int {
    if x == 0 {
        return 0;
    } else if x == 1 {
        return 1;
    }
    return fib(x - 1) + fib(x - 2);
}

// Recursive GCD
fn gcd(x int, y int) int {
    if y == 0 {
        return x;
    }
    return gcd(y, x - (x / y * y));
}

fn main() int {
    return fact(10);
}
